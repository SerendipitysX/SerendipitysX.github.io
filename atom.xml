<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://SerendipitysX.github.io/</id>
    <title>XSS的备忘录</title>
    <updated>2021-03-02T11:40:42.043Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://SerendipitysX.github.io/"/>
    <link rel="self" href="https://SerendipitysX.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://SerendipitysX.github.io/images/avatar.png</logo>
    <icon>https://SerendipitysX.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, XSS的备忘录</rights>
    <entry>
        <title type="html"><![CDATA[[算法]详解常见排序算法]]></title>
        <id>https://SerendipitysX.github.io/post/suan-fa-xiang-jie-chang-jian-pai-xu-suan-fa/</id>
        <link href="https://SerendipitysX.github.io/post/suan-fa-xiang-jie-chang-jian-pai-xu-suan-fa/">
        </link>
        <updated>2021-02-27T07:48:13.000Z</updated>
        <content type="html"><![CDATA[<p><strong>题设：有n个无序数字，需要按一定顺序排列。</strong></p>
<h1 id="基础排序三人组冒泡选择插入">🐣基础排序三人组（冒泡/选择/插入）</h1>
<h2 id="一冒泡排序">（一）冒泡排序</h2>
<p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><br>
<img src="https://media.giphy.com/media/cQIuA8Q77zFUm9NVwS/giphy.gif" alt="BubbleSort" loading="lazy"><br>
Key:</p>
<ol>
<li>相邻两个数字比大小，无论结果如何，指针都要向后移</li>
<li>每一趟都会往有序区（自然在末端啦）塞一个数字</li>
<li>共<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>趟</li>
</ol>
<pre><code>def Bubblesort(li):
    for i in range(len(li)-1):
        for j in range(len(li)-i-1):
            if li[j] &gt; li[j+1]:
                li[j],li[j+1] = li[j+1],li[j]
    return li
</code></pre>
<p>但是考虑一种情况，如果这是一个有序或者部分有序的数列， 上述程序一视同仁的进行操作将会造成很多浪费，故设置标志位，如果某一糖没有发生交换，说明已经是有序数组了，可以直接输出。</p>
<pre><code>def Bubblesort(li):
    for i in range(len(li)-1):
        exchange = False
        for j in range(len(li)-i-1):
            if li[j] &gt; li[j+1]:
                li[j],li[j+1] = li[j+1],li[j]
                exchange = True
        if exchange == True: ##if not exchange:
            return li
    return li
</code></pre>
<h2 id="二选择排序">（二）选择排序</h2>
<p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><br>
与冒泡排序类似，也可以分为有序区和无序区。 在从小到大排序的情况下，每一趟选最小的出来，放在队首的有序区里。<br>
<img src="https://SerendipitysX.github.io//post-images/1614418070886.gif" alt="" loading="lazy"><br>
key：</p>
<ol>
<li>有序区/无序区</li>
<li>记录的是最小数的<strong>位置</strong></li>
</ol>
<pre><code>def selectsort(li):
    for i in range(len(li)-1):
        min_loc = i
        for j in range(i+1,len(li)): #不用再跟自己比 所以是i+1
            if li[min_loc] &gt; li[j]:
                min_loc = j
        li[i], li[min_loc] = li[min_loc],li[i]
    return li
</code></pre>
<h2 id="三插入排序">（三）插入排序</h2>
<p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><br>
就像是打斗地主摸牌，把新来的一张牌插到当前有序排列的合适位置。<br>
无序区的第一个与前面的有序区比较大小，从有序区的末尾朝前遍历，在合适的位置插入。<br>
<img src="https://SerendipitysX.github.io//post-images/1614484365618.gif" alt="" loading="lazy"><br>
key：</p>
<ol>
<li>有序区/无序区</li>
<li>记录的是合适的<strong>位置</strong>（所谓合适，就是找到有序区从左往右第一个比他大的数）</li>
<li>有序区朝后移动时小心覆盖</li>
</ol>
<pre><code>def insertsort(li):
    for i in range(1,len(li)): # 无序区的第一个到最后一个
        max_loc = i 
        for j in range(i-1,-1,-1): # 有序区从最后一个到第一个
            temp = li[i] # 无序区的第一个
            if li[j] &gt; li[i]:
                max_loc = j # 最后出来的max_loc就是有序区中从左往右第一个比li[i]大的值
        if max_loc != i:
            for q in range(i-1,max_loc-1,-1):
                li[q+1] = li[q]
            li[max_loc], temp = temp, li[max_loc]
        print(li)
    return li
</code></pre>
<hr>
<h1 id="进阶排序三人组快速堆">🐥进阶排序三人组（快速/堆）</h1>
<h2 id="一快速排序">（一）快速排序</h2>
<p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>∗</mo><mi>l</mi><mi>g</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n*lg(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span><br>
选一个基准点，左边的全比他小，右边的全比他大。然后对左边右边分别进行递归排序，方法同上。<br>
🎯[注]此图是version1代码的图<br>
<img src="https://SerendipitysX.github.io//post-images/1614511049223.gif" alt="" loading="lazy"><br>
key:</p>
<ol>
<li>递归</li>
<li>注意边界情况（如给定序列本身有序，可能复杂度就变成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>了）<br>
<strong>Version 1</strong> 推荐指数：⭐️⭐️⭐️</li>
</ol>
<pre><code>def partition(array, low, high):
    # 设最后一个数是pivot
    pivot = array[high]
    i = low - 1
    #采取的分区策略是队首放less than pivot（我们叫她less区），具体实操嘛，
    #就是先设置一个锚点作为less区的起点，一遇到比pivot小的数
    #就往less区装，即把站着坑位的greater数与less数交换一下。
    for j in range(low, high):
        if array[j] &lt;= pivot:
            i = i + 1
            (array[i], array[j]) = (array[j], array[i])

    (array[i + 1], array[high]) = (array[high], array[i + 1])

    return i + 1

def quickSort(array, low, high):
    if low &lt; high:
        # Select pivot position and put all the elements smaller 
        # than pivot on left and greater than pivot on right
        pi = partition(array, low, high)

        # Sort the elements on the left of pivot
        quickSort(array, low, pi - 1)

        # Sort the elements on the right of pivot
        quickSort(array, pi + 1, high)
</code></pre>
<p><strong>Version 2</strong> 推荐指数：⭐️⭐️⭐️⭐️</p>
<pre><code>def partition(li,left,right):
    tmp = li[left]
    while left &lt; right:
        while left&lt;right and li[right]&gt;=tmp: 
            #必须先从右边开始
            #因为这里把左边第一个当成 pivot，空了出来
            #left&lt;right不可少，不然内部就会陷入死循环[-1]
            right-=1
        li[right] = li[left]
        while left&lt;right and li[left]&lt;=tmp:
            left+=1
        li[left] = li[right]
    li[left] = tmp
    return left

def quicksort(li,left,right):
    if left &lt; right: #还没重合
        mid = partition(li,left,right)
        quicksort(left,mid-1)
        quicksort(mid+1,right)
</code></pre>
<p><strong>Version 3</strong> 推荐指数：⭐️⭐️⭐️⭐️⭐️</p>
<pre><code>def quicksort(li):
    pivot = len(li) // 2
    left =[x for x in li if x &lt; privot]
    mid =[x for x in li if x == privot]
    right =[x for x in li if x&gt; privot]
    return quicksort(left) + mid + quicksort(right)
</code></pre>
<h2 id="二堆排序">（二）堆排序</h2>
<p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>∗</mo><mi>l</mi><mi>g</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n*lg(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span><br>
在介绍堆排序之前，咱们来回顾一下二叉树的基本知识</p>
<ol>
<li>完全二叉树：通俗一点，就是从左到右依次排的，不能插队，最后一层可以有空<br>
<img src="https://SerendipitysX.github.io//post-images/1614513659226.png" alt="" loading="lazy"></li>
<li>小根/大根：如图所示<br>
<img src="https://SerendipitysX.github.io//post-images/1614513696728.png" alt="" loading="lazy"><br>
以大根树为例，我们可以看出来，根节点是整棵树最大的</li>
</ol>
<pre><code>def sift(data, low, high):
    '''
    目的就是让这棵树的根节点是整棵树最大的。
    :param data: tree
    :param low: 堆的最高点（root）
    :param high: 堆的最后一个，用来判定是否出界
    :return:
    '''
    i = low # i指向根节点
    j = 2 * i + 1 #子节点，这里是左儿子
    tmp = data[low]
    while j &lt;= high:#建立大堆
        if j+1&lt;high and data[j]&lt;data[j+1]:
            j = j+1 #比较叶子节点大小
        if data[j]&gt;tmp:
            data[j] = data[i]
            i = j
            j = 2 * i + 1
        else:
            break
    else:
        data[i] = tmp

def heapSort(data):
    n = len(data)
    for i in range(n//2, -1, -1):
        sift(data,  low=i, high=n-1) #step1:建立max heap(顺序是从最后的树往前，才能保证多层树符合条件) ------就是让每个根节点都是它所在那棵树的老大！！！！！！
    for i in range(n-1, -1, -1):
        data[0], data[i] = data[i], data[0] #step2:把根节点(最大)与最后的叶子结点交换-----老大被选出来啦，看下条代码已经不把他算进去啦
        sift(data, low=0, high=i-1) #再次建立最大树
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello World! I'm Ainsley Xiao!]]></title>
        <id>https://SerendipitysX.github.io/post/hello-world-im-ainsley-xiao/</id>
        <link href="https://SerendipitysX.github.io/post/hello-world-im-ainsley-xiao/">
        </link>
        <updated>2021-02-25T15:37:12.000Z</updated>
        <content type="html"><![CDATA[<!-- <center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,0.5);" 
    src="C:/Users/DELL/Documents/Gridea/post-images/1614269553980.jpg" width = "90%" alt=""/>
    <br>
    <div style="color:orange; border-bottom: 2px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 1px;">
      cr: K Mitch Hodge
  	</div>
</center> -->
<p>大三下学期伊始，肖四四终于拥有一个自己的博客啦。</p>
<p>最近乃至停止写小说的这几个月，我越来越感受到自己有些失语，这种感觉就像是用很丰富的食材做了一锅粗茶淡饭。都说行过于言，但不言无以记行。而这一次呢，我想记录在案的<strong>行</strong>就是知识和心情，毕竟我对这个备忘录的定位就是<strong>不说废话的树洞</strong>。</p>
<p>目前我的搭建方法比较小白，即用typora编辑好文章，用Gridea上传。经过一晚上的实践，发现两个待解决难题：</p>
<ol>
<li>MD格式直接从typora移植到Gridea会有一些小问题。Moreover，typora中的markdown格式可以由CSS自定义。</li>
<li>Gridea上传速度是在影响心情！！！比如我现在写完的这篇文章死活传不上去，临门一脚掉链子可真气人！</li>
</ol>
<p>针对第一点，我终于没有任何理由逃避学习前端了(๑＞ڡ＜)☆（<s>轮到我捏娃娃了!</s>）</p>
<p>把链接贴在下边，这么便捷，你不学学看吗~</p>
<p><a href="https://www.bilibili.com/video/BV1YJ411a7dy">狂神说CSS3</a>  <a href="https://www.bilibili.com/video/BV1x4411V75C">狂神说HTML</a></p>
<hr>
<p>既然已经来到了大三这个节点！想到夏天要到了，本咸鱼确实振奋，决定伸个懒腰顺便翻身晒个太阳o(´^｀)o<br>
下列任务按从重到轻的顺序排列，学习资源也附上备忘：<br>
🚀某杯比赛（ACwing的算法基础课 &amp; B站的算法教程）<br>
✈️大创项目（发现的网站 &amp; 老师给的书）<br>
🚗托福 3.27 （多给一个月，至少得刷20套TPO）<br>
🚌深度学习基础 （吴恩达作业 &amp; Sklearn）<br>
🌵为暑假实习而奋斗</p>
<p>可能开学后会有新增和结构变更。今后每月25号就是本四四的月度总结。<br>
不想也不会盲目跟着别人卷，一切都有序滑向我想去的那一方，这就是努力的意义所在。<br>
这一次咸鱼翻身，我是认真的！💪</p>
]]></content>
    </entry>
</feed>